# Kütüphaneler??
plt = import '/matplotlib/pyplot'

# Yapılandırmalar:
# Grafiklerin ana-akış işleci durdurmaması için??
# plt.ion!
showGraphicalOutput = False

# Gösterişli çıktılar:
print = bind print 'Out []:\n' end: '\n---\n\n'

# Tanımlar:
# Bir günde ortalama kaç saat ders çalıştığı:
saat = [[1.6], [1.65], [1.7], [1.73], [1.8]]
# Sınavdan Aldığı notlar:
notlar = [[60], [65], [72.3], [75], [80]]

# In [2]:

# Tablo Başlığı:
plt.title "Saate Karşı Notların Grafiği"
# Tablo X düzlem etiketi:
plt.xlabel "SAAT"
# Tablo Y düzlem etiketi:
plt.ylabel "NOTLAR"
# Grafik çağrımı:
plt.plot saat notlar 'k.'
# X, Y düzlem genişlikleri:
plt.axis [1.5, 1.8, 50, 90]
# Izgara: aktif
plt.grid True

showGraphicalOutput and plt.show!

# ---

# Yardımcı: ndarray -> atomic
fromPredict = m -> m |>.flatten! |>.tolist!

# In [3]:
LinearRegression = import '/sklearn/linear_model/LinearRegression'

# Model kurma ve uydurma:
model = LinearRegression!
model.fit X:saat y:notlar

# Tahmin yapma:
[tahmin] =
         model.predict [[1.75]] |> fromPredict
print "Tahmin:" $ round tahmin 2
# ---

# In [4]:

# Tablo Başlığı:
plt.title "Saate Karşı Notların Grafiği"
# Tablo X düzlem etiketi:
plt.xlabel "SAAT"
# Tablo Y düzlem etiketi:
plt.ylabel "NOTLAR"
# Grafik çağrımı:
plt.plot saat notlar 'k.'
# X, Y düzlem genişlikleri:
plt.axis [1.5, 1.8, 50, 90]
# Izgara: aktif
plt.grid True

plt.plot saat (model.predict saat) color:'r'

showGraphicalOutput and plt.show!

# ---

# In [5]:

ekstremeSaat = [[0], [1.8]]

# Tablo Başlığı:
plt.title "Saate Karşı Notların Grafiği"
# Tablo X düzlem etiketi:
plt.xlabel "SAAT"
# Tablo Y düzlem etiketi:
plt.ylabel "NOTLAR"
# Grafik çağrımı:
plt.plot saat notlar 'k.'
# X, Y düzlem genişlikleri:
plt.axis [0, 1.85, -200, 200]
# Izgara: aktif
plt.grid True

plt.plot ekstremeSaat (model.predict ekstremeSaat) color:'r'

showGraphicalOutput and plt.show!

# ---

# In [6]:

# Saat değişkenini 0 (sıfır) seçerek, Y eksenini kestiği, eğitim noktası bulunur.
# round model.predict([[0]])[0][0] 2
tahmin_ = model.predict [[0]] |> fromPredict |> head
print "Tahmin:" $ round tahmin_ 2

# ---

# In [7]:

print "Katsayı:" (round (model.coef_ |> head |> head) 2)

# ---

# In []:

np = import '/numpy'

# ---

# In []:
# RNM{notlar->tahmin}

# Örnek tutarlılığı için, dökümandaki notlar yeniden tanımlaması yapılmak
# yerine, hesaplama tahmin ismiyle tanımlanmıştır.
# Aşağıdaki ifadede ise tahmin hesaplaması, notlar olarak yeniden
# kullanılmak istenmiştir.

artıkKarelerToplamı = np.sum ((tahmin - (model.predict saat)) ** 2)
print ("Artık Kareler Toplamı: {:.2f}".format artıkKarelerToplamı)

# ---

# In []:

# Test verisi:
saat_test = [[1.58], [1.62], [1.69], [1.76], [1.82]]
notlar_test = [[58], [63], [72], [73], [85]]

# ---

# In []:

#RNM{notlar_test_mean->notlar_test_ortalama}
#EaV{notlar_test_çözüm:np.ravel(notlar_test)}

# Toplam kareler Toplamı:
notlar_test_çözüm = np.ravel(notlar_test)
notlar_test_ortalama = np.mean(notlar_test_çözüm)
TKT = np.sum ((notlar_test_çözüm - notlar_test_ortalama) ** 2)

# Artık Kareler Toplamı:
AKT = np.sum((
    notlar_test_çözüm
    -
    np.ravel(
        model.predict(saat_test)
    )
) ** 2)

# R'nin karesi:
R_kare = 1 - (AKT / TKT)

print ("TKT: {:.2f} \nAKT: {:.2f} \nR-kare: {:.2f}".format TKT AKT R_kare)

# ---

# In []:
#EaV{hesaplanan_R_kare:model.score(saat_test, notlar_test)}

# Scikit-Learn Kullanarak R-kare hesaplama:
hesaplanan_R_kare = model.score saat_test notlar_test
print ("R-kare: {:.4f}".format hesaplanan_R_kare)

# ---

# In []:

print ("Sonuç: {:.4f} (%{:.2f})".format hesaplanan_R_kare (hesaplanan_R_kare * 100))

# ---
